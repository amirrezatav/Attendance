<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                   >

    <Style TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="/Attendance;component/Fonts/#IRANSans" />
    </Style>
    
    <!--General-->
    <Style TargetType="Image">
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
    </Style>
    <SolidColorBrush x:Key="Light" Color="#A6E2DC"/>
    <SolidColorBrush x:Key="UltraLigh" Color="#DAF3F0"/>
    <SolidColorBrush x:Key="Opposite" Color="#4120A9"/>
    <SolidColorBrush x:Key="Heavy" Color="#189AB4"/>
    <SolidColorBrush x:Key="Heavy1" Color="DarkCyan"/>
    <SolidColorBrush x:Key="MouseOver" Color="Red"/>
    <SolidColorBrush x:Key="ExtraHeavy" Color="#05445E"/>
    <SolidColorBrush x:Key="PersianGreen" Color="#00a693"/>
    <SolidColorBrush x:Key="Black" Color="Black"/>
    <SolidColorBrush x:Key="White" Color="White"/>
    <SolidColorBrush x:Key="Gray" Color="Gray"/>
    <LinearGradientBrush x:Key="ExtraHeavyGradiant" StartPoint="1,0.5" EndPoint="0,0.5">
        <GradientStop Color="#4A6FAA" Offset="0.0" />
        <GradientStop Color="#02075d" Offset="0.75" />
    </LinearGradientBrush>
    <!--Tavakoli-->


    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
    <Style x:Key="CorenerRadiuseBtn" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="MainButton">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border TextBlock.Foreground="{TemplateBinding Foreground}"
										x:Name="Border"
										CornerRadius="20"
										BorderBrush="White"
                                        TextBlock.FontFamily="Fonts/#IRANSans" 
										Background="{TemplateBinding Background}"
										BorderThickness="1">

                        <ContentPresenter Margin="2"
													  HorizontalAlignment="Center"
													  VerticalAlignment="Center"
													  RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#8b8c89"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarTrackThumb"
        TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Width="Auto"
                                Height="Auto"
                                Fill="Transparent" />
                        <Border x:Name="CornerScrollBarRectangle"
                            CornerRadius="5"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Width="Auto"
                            Height="Auto"
                            Margin="0,1,0,1"
                            Background="{DynamicResource Opposite}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag"
                                Value="Horizontal">
                            <Setter TargetName="CornerScrollBarRectangle"
                                Property="Width"
                                Value="Auto" />
                            <Setter TargetName="CornerScrollBarRectangle"
                                Property="Height"
                                Value="6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled"
            Value="false" />
        <Setter Property="Foreground"
            Value="#ADABAB" />
        <Setter Property="Background"
            Value="Transparent" />
        <Setter Property="Width"
            Value="7" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot"
                        Width="7"
                        Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*" />
                        </Grid.RowDefinitions>
                        <Track x:Name="PART_Track"
                            Grid.Row="0"
                            IsDirectionReversed="true"
                            Focusable="false">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb"
                                    Background="{TemplateBinding Foreground}"
                                    Style="{DynamicResource ScrollBarTrackThumb}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp"
                                            Command="ScrollBar.PageDownCommand"
                                            Opacity="0"
                                            Focusable="false" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown"
                                            Command="ScrollBar.PageUpCommand"
                                            Opacity="0"
                                            Focusable="false" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Thumb"
                                Property="IsMouseOver"
                                Value="true">
                            <Setter Value="{DynamicResource ButtonSelectBrush}"
                                TargetName="Thumb"
                                Property="Background" />
                        </Trigger>
                        <Trigger SourceName="Thumb"
                                Property="IsDragging"
                                Value="true">
                            <Setter Value="{DynamicResource DarkBrush}"
                                TargetName="Thumb"
                                Property="Background" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                Value="false">
                            <Setter TargetName="Thumb"
                                Property="Visibility"
                                Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation"
                                Value="Horizontal">
                            <Setter TargetName="GridRoot"
                                Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track"
                                Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width"
                                Value="Auto" />
                            <Setter Property="Height"
                                Value="8" />
                            <Setter TargetName="Thumb"
                                Property="Tag"
                                Value="Horizontal" />
                            <Setter TargetName="PageDown"
                                Property="Command"
                                Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp"
                                Property="Command"
                                Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BorderItem" TargetType="Border">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Height" Value="70"/>
        <Setter Property="Background" Value="{DynamicResource ExtraHeavyGradiant}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Opposite}"/>
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="TextBlock" x:Key="MenuItem">
        <Setter Property="FontFamily" Value="/Attendance;component/Fonts/#B Nazanin"/>
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Margin" Value="0 0 15 0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <Style TargetType="ToolTip">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="BorderThickness" Value="0.8"/>
                <Setter Property="Background" Value="White"/>
                <Setter Property="CornerRadius" Value="10"/>
                <Setter Property="Padding" Value=" 10 0 10 10"/>
            </Style>
            <Style TargetType="Label">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="HorizontalAlignment" Value="Right"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="0 0 0 0"/>
                <Setter Property="FontSize" Value="13"/>
                <Setter Property="FontFamily" Value="/Attendance;component/Fonts/#B Titr"/>
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="HorizontalAlignment" Value="Right"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Foreground" Value="Gray"/>
                <Setter Property="Margin" Value="0 -3 12 0"/>
                <Setter Property="FontSize" Value="15"/>
                <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
                <Setter Property="FontFamily" Value="/Attendance;component/Fonts/#B Nazanin"/>
            </Style>
            <Style TargetType="Image">
                <Setter Property="HorizontalAlignment" Value="Right"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Margin" Value="2 10 2 0"/>
                <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
                <Setter Property="Width" Value="15"/>
                <Setter Property="Height" Value="15"/>
            </Style>
            <Style TargetType="StackPanel">
                <Setter Property="HorizontalAlignment" Value="Right"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
            </Style>
        </Style.Resources>
    </Style>
    <Style x:Key="MyWaterMarkStyle" TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="IBeam"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="MainBorder" Background="{x:Null}" BorderThickness="0,0,0,1"  >
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="BorderBrush" Value="#FF535353"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="BorderBrush"  >
                                            <Setter.Value>
                                                <SolidColorBrush Color="#FF0864AC" Opacity="0.4" />
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" Margin="5,0,0,0" VerticalAlignment="Center" />
                            <Label  x:Name="WaterMarkLabel" HorizontalContentAlignment="Right"  FontFamily="Fonts/#IRANSans" Content="{TemplateBinding Tag}" VerticalAlignment="Bottom"
                               Visibility="Collapsed" Foreground="Gray"  FontSize="18"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WaterMarkLabel" Value="Visible"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility"  TargetName="WaterMarkLabel" Value="Hidden"/>
                            <Setter Property="BorderBrush"  TargetName="MainBorder" Value="DarkBlue"/>
                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
    </Style>
     <Style x:Key="PassWordWaterMark" BasedOn="{x:Null}" TargetType="{x:Type PasswordBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type PasswordBox}">
                        <Border x:Name="OuterBorder">
                        <Border x:Name="InnerBorder"  Background="{x:Null}" BorderThickness="0,0,0,1"  >
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="BorderBrush" Value="#FF535353"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="BorderBrush"  >
                                                <Setter.Value>
                                                    <SolidColorBrush Color="#FF0864AC" Opacity="0.4" />
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                        
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Grid>
                                <Label x:Name="lblPwd" Content="{TemplateBinding Tag}" FontSize="18" VerticalAlignment="Bottom" Margin="0,0,0,6"  Foreground="Gray" Padding="0"/>
                                    <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost"/>
                                </Grid>
                            </Border>
                        </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsFocused" Value="True">
                                <Setter Property="Visibility" TargetName="lblPwd" Value="Hidden"/>
                            <Setter Property="BorderBrush"  TargetName="InnerBorder" Value="DarkBlue"/>
                        </Trigger>
                        <Trigger Property="IsTabStop" Value="True">
                            <Setter Property="Visibility" TargetName="lblPwd" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    <Style TargetType="Grid" x:Key="StyleForSummary" >
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Border" x:Key="HeaderBorder">
        <Setter Property="CornerRadius" Value="26"/>
        <Setter Property="Padding" Value="5"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="#8B8C89"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ContextMenu" x:Key="StContextmenu" >
        <Setter Property="Foreground" Value="#C0D6DF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                Background="#274C77"
                BorderThickness="3">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="#DBE9EE" />
                        </Border.BorderBrush>

                        <StackPanel IsItemsHost="True"
                      KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Image" x:Key="SimpleStyleIcon">
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ComboBoxItem" x:Key="StyleComboXItem">
        <Setter Property="FontFamily" Value="/Attendance;component/Fonts/#B Nazanin"/>
        <Setter Property="FlowDirection" Value="RightToLeft"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="#4A6FA5"/>
            </Trigger>
        </Style.Triggers>

    </Style>
    <Style x:Key="BorderItem2" TargetType="Border">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="White"/>
        <Setter Property="CornerRadius" Value="10" />
        <Setter Property="Background" Value="{DynamicResource ExtraHeavy}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Opposite}"/>
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Image}" x:Key="IconSearchEmployee">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="TextBlock" x:Key="InformationEmployeeCenter">
        <Setter Property="FontFamily" Value="/Hunel_Accelerator;component/Files/Fonts/#B Titr"/>
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="Margin" Value="0,15,5,0" />
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>
    <Style x:Key="ImageAsBtn" TargetType="Image">
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.9"/>
                <Setter Property="OpacityMask" Value="{DynamicResource Light}"/>
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ChangingColorComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels"
                    Value="true" />
        <Setter Property="OverridesDefaultStyle"
                    Value="true" />
        <Setter Property="HorizontalContentAlignment" 
                    Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
        <Setter Property="VerticalContentAlignment" 
                    Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"/>
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">

                    <Border Background="AliceBlue">
                        <Border x:Name="Border"
                                Padding="0,0,0,2"
                                SnapsToDevicePixels="true"
                                Height="{Binding Height, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}">
                            <ContentPresenter 
                                VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}}"
                                HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}}"/>
                        </Border>

                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" 
                                    Value="true">
                            <Setter Property="Background" TargetName="Border"  >
                                <Setter.Value>
                                    <SolidColorBrush Color="#4a6fa5" Opacity="0.5"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground"
                                        Value="Black" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" 
                                    Value="true">
                            <Setter Property="Background" TargetName="Border"
                                        Value="{StaticResource Heavy}" />
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                    Value="false">
                            <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TextBox}" x:Key="Txtstyle">
        <Setter Property="Background"  Value="{DynamicResource White}"/>
        <Setter Property="Foreground" Value="{DynamicResource Black}"/>
        <Setter Property="Padding" Value="10,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="Border"  
                            CornerRadius="20" 
                            BorderThickness="3" 
                            >
                        <Border.Background>
                            <SolidColorBrush Color="WhiteSmoke"/>
                        </Border.Background>
                        <Border.BorderBrush>
                            <SolidColorBrush Color="Black"/>
                        </Border.BorderBrush>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ScrollViewer Margin="0"
                        x:Name="PART_ContentHost" />
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Image" x:Key="Icon">
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
    </Style>
    <Style TargetType="TextBox" x:Key="InputStyle">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Cursor" Value="IBeam"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Padding"  Value="5,0,5,0"></Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource Heavy1}"/>
        <Setter Property="Foreground" Value="{DynamicResource Black}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="/Hunel_Accelerator;component/Files/Fonts/#B Nazanin"/>
        <Setter Property="Template" >
         
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border Background="{x:Null}" x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"  BorderThickness="{TemplateBinding BorderThickness}" >
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </Border>
                        <Label Margin="5,0,0,0" x:Name="WaterMarkLabel" FontFamily="/Hunel_Accelerator;component/Files/Fonts/#B Nazanin" FontSize="14" Content="{TemplateBinding Tag}" VerticalAlignment="Center"
                               Visibility="Collapsed" Foreground="Gray" FontWeight="Normal" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{x:Null}" TargetName="Bd"/>
                            <Setter Property="Foreground" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Heavy}"></Setter>
                        </Trigger>
                        
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource White}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WaterMarkLabel" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility"  TargetName="WaterMarkLabel" Value="Hidden"/>
                            <Setter Property="BorderBrush"  TargetName="Bd" Value="DarkBlue"/>

                        </Trigger>
                    </ControlTemplate.Triggers>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBox" x:Key="InputStyleRadius">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Cursor"  Value="IBeam"/>

            </Trigger>
        </Style.Triggers>
        <Setter Property="Padding"  Value="5,0,5,0"></Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource Heavy}"/>
        <Setter Property="Foreground" Value="{DynamicResource Black}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="/Hunel_Accelerator;component/Files/Fonts/#B Nazanin"/>
        <Setter Property="Template" >

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border Background="{x:Null}" x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="8"  BorderThickness="{TemplateBinding BorderThickness}" >
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </Border>
                        <Label Margin="5,0,0,0" x:Name="WaterMarkLabel" FontFamily="/Hunel_Accelerator;component/Files/Fonts/#B Nazanin" FontSize="14" Content="{TemplateBinding Tag}" VerticalAlignment="Center"
                               Visibility="Collapsed" Foreground="Gray" FontWeight="Normal" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{x:Null}" TargetName="Bd"/>
                            <Setter Property="Foreground" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Heavy}"></Setter>
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource White}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WaterMarkLabel" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility"  TargetName="WaterMarkLabel" Value="Hidden"/>
                            <Setter Property="BorderBrush"  TargetName="Bd" Value="DarkBlue"/>

                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="InputPassWordStyle" BasedOn="{x:Null}" TargetType="{x:Type PasswordBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource Black}"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Padding" Value="5"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="OuterBorder">
                        <Border x:Name="InnerBorder"  Background="{x:Null}" BorderThickness="1" CornerRadius="10" >
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="BorderBrush" Value="{DynamicResource Heavy1}" />
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="BorderBrush"  Value="{DynamicResource Heavy}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Grid>
                                <Label x:Name="lblPwd" Content="{TemplateBinding Tag}" FontSize="18" VerticalAlignment="Bottom" Margin="5,0,0,0"  Foreground="Gray" />
                                <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="lblPwd" Value="Hidden"/>
                            <Setter Property="BorderBrush"  TargetName="InnerBorder" Value="DarkBlue"/>
                            <Setter Property="Background"  TargetName="InnerBorder" Value="white"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBlock" x:Key="InfoTitle">
        <Setter Property="FontFamily" Value="/Attendance;component/Fonts/#B Nazanin"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="0"/>
    </Style>
    <Style TargetType="TextBlock" x:Key="InfoData">
        <Setter Property="FontFamily" Value="/Attendance;component/Fonts/#IRANSans Medium"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="0"/>
    </Style>
    <Style TargetType="TextBlock" x:Key="ExplanationItem">
        <Setter Property="FontFamily" Value="/Attendance;component/Fonts/#IRANSans"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="0 0 0 2"/>
    </Style>
    <Style TargetType="Button" x:Key="ButtonStyle">
        <Setter Property="Background" Value="{DynamicResource ExtraHeavy}"/>
        <Setter Property="Foreground" Value="{DynamicResource UltraLigh}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border TextBlock.Foreground="{TemplateBinding Foreground}"
										x:Name="Border"
										CornerRadius="10"
										BorderBrush="White"
                                        TextBlock.FontFamily="/Attendance;component/Fonts/#IRANSans Medium" 
										Background="{TemplateBinding Background}"
										BorderThickness="1">
                        <ContentPresenter Margin="2"
													  HorizontalAlignment="Center"
													  VerticalAlignment="Center"
													  RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#8b8c89"/>
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="TextBox" x:Key="ConvertTextBlock">
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="/Attendance;component/Fonts/#IRANSans Medium"/>
    </Style>
    <Style TargetType="RadioButton" x:Key="Radio_btn_Style">
        <Setter Property="FontFamily" Value="B Nazanin"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>
    <SolidColorBrush x:Key="RadioButton.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="RadioButton.Static.Border" Color="#FF707070"/>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="#FF212121"/>
    <Style x:Key="FlatRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,5,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{StaticResource RadioButton.Static.Glyph}" MinWidth="6" MinHeight="6" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.MouseOver.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
    <Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}"/>
        <Setter Property="TextDecorations" Value="Underline"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="Red"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RichTextBoxRadiuseStyle" TargetType="{x:Type RichTextBox}">
        <Style.Resources>
            <Style x:Key="{x:Type FlowDocument}" TargetType="{x:Type FlowDocument}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
            </Style>
            <Style x:Key="{x:Type Hyperlink}" BasedOn="{StaticResource {x:Type Hyperlink}}" TargetType="{x:Type Hyperlink}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Foreground" Value="Blue"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="MinWidth" Value="10"/>
        <Style.BasedOn>
            <StaticResource ResourceKey="{x:Type TextBoxBase}"/>
        </Style.BasedOn>
    </Style>
    <Style TargetType="TextBox" x:Key="NormalTextBox">

        <Setter Property="FontFamily" Value="/Hunel_Accelerator;component/Files/Fonts/#B Yekan"/>
    </Style>
    <Style x:Key="CmboItem" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FontFamily" Value="/Hunel_Accelerator;component/Files/Fonts/#B Nazanin"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="SnapsToDevicePixels"
                    Value="true" />
        <Setter Property="OverridesDefaultStyle"
                    Value="true" />
        <Setter Property="HorizontalContentAlignment" 
                    Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
        <Setter Property="VerticalContentAlignment" 
                    Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"/>
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Background="WhiteSmoke">
                        <Border x:Name="Border"
                                Padding="0,0,0,2"
                                SnapsToDevicePixels="true"
                                Height="{Binding Height, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                BorderBrush="LightBlue" BorderThickness="1"
                                >
                            <ContentPresenter 
                                VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}}"
                                HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}}"/>
                        </Border>

                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" 
                                    Value="true">
                            <Setter Property="Background" TargetName="Border"  >
                                <Setter.Value>
                                    <SolidColorBrush Color="#00a1a1" Opacity="0.5"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground"
                                        Value="Black" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" 
                                    Value="true">
                            <Setter Property="Background" TargetName="Border"
                                        Value="{StaticResource Heavy1}" />
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                    Value="false">
                            <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
    <Style x:Key="CheckBoxRTL" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" FlowDirection="LeftToRight" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                                <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ComboBox}" x:Key="ComboCostum">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton x:Name="ToggleButton"
                                            Template="{StaticResource ComboBoxToggleButtonStyle}"
                                            Grid.Column="2"
                                            Focusable="false"
                                            ClickMode="Press"
                                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter x:Name="ContentSite"
                                                IsHitTestVisible="False"
                                                Content="{TemplateBinding SelectionBoxItem}"
                                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                Margin="3,3,23,3"
                                                VerticalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}">
                        </ContentPresenter>
                        <TextBox x:Name="PART_EditableTextBox"
                                       Style="{x:Null}"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Bottom"
                                       Margin="3,3,23,3"
                                       Focusable="True"
                                       Background="Transparent"
                                       Visibility="Hidden"
                                       IsReadOnly="{TemplateBinding IsReadOnly}" >
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox" >
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <Popup x:Name="Popup"
                                     Placement="Bottom"
                                     IsOpen="{TemplateBinding IsDropDownOpen}"
                                     AllowsTransparency="True"
                                     Focusable="False"
                                     PopupAnimation="Slide">
                            <Grid x:Name="DropDown"
                                      SnapsToDevicePixels="True"
                                      MinWidth="{TemplateBinding ActualWidth}"
                                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                            BorderThickness="1">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                                    </Border.BorderBrush>
                                    <Border.Background>
                                        <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                                    </Border.Background>
                                </Border>
                                <ScrollViewer Margin="4,6,4,6"
                                                  SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True"
                                                    KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems"
                                     Value="false">
                            <Setter TargetName="DropDownBorder"
                                        Property="MinHeight"
                                        Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping"
                                     Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll"
                                        Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>